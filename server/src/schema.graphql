type Query {
  feed(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    query: String
  ): ItemConnection
  allUsers(first: Int, last: Int, before: Cursor, after: Cursor): UserConnection
  node(id: ID!): Node
}

type Subscription {
  itemAdded: ItemEdge!
}

input PostLinkInput {
  title: String!
  url: String!
}

type PostLinkPayload {
  item: ItemEdge!
}

input PostPostInput {
  title: String!
  text: String!
}

type PostPostPayload {
  item: ItemEdge!
}

input VoteInput {
  item: ID!
  type: VoteType
}

type VotePayload {
  item: ItemEdge!
}

type Mutation {
  postLink(input: PostLinkInput!): PostLinkPayload!
  postPost(input: PostPostInput!): PostPostPayload!
  vote(input: VoteInput!): VotePayload!
}

interface Node {
  id: ID!
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Item implements Node {
  id: ID!
  type: ItemType!
  url: String
  text: String
  title: String!
  votes(first: Int, last: Int, before: Cursor, after: Cursor): VoteConnection!
  rating: Int!
  canVote: Boolean!
  createdAt: String!
  by: User!
}

enum ItemType {
  LINK
  POST
}

type ItemConnection {
  edges: [ItemEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ItemEdge {
  cursor: Cursor!
  node: Item
}

type Vote implements Node {
  id: ID!
  item: Item!
  type: VoteType!
  by: User!
  createdAt: String!
}

enum VoteType {
  UP
  DOWN
}

type VoteConnection {
  edges: [VoteEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type VoteEdge {
  cursor: Cursor!
  node: Vote
}

type User implements Node {
  id: ID!
  username: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo
  totalCount: Int!
}

type UserEdge {
  cursor: Cursor!
  node: User!
}
